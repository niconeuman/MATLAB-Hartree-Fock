function OutMat = int_expand(InMat,Vec,L,Dim)

%Vec should be a 3x1 column vector
%InMat is a Dim1xDim2 column rectangular matrix
%L is the angular momentum corresponding to the dimension of InMat

if (Dim == 1)
    %OutMat = [Vec(1)*InMat;Vec(2)*InMat(end-L:end,:,:,:);Vec(3)*InMat(end,:,:,:)];
    if L == 0
        OutMat = [Vec(1)*InMat
                  Vec(2)*InMat
                  Vec(3)*InMat]; %3x1
    elseif L == 1
        OutMat = [Vec(1)*InMat(1,:,:,:)
                  Vec(2)*InMat(1,:,:,:)
                  Vec(3)*InMat(1,:,:,:)
                  Vec(2)*InMat(2,:,:,:)
                  Vec(3)*InMat(2,:,:,:)
                  Vec(3)*InMat(3,:,:,:)];%6x1
    elseif L == 2
        OutMat = [Vec(1)*InMat(1,:,:,:)
                  Vec(2)*InMat(1,:,:,:)
                  Vec(3)*InMat(1,:,:,:)
                  Vec(2)*InMat(2,:,:,:)
                  Vec(3)*InMat(2,:,:,:)
                  Vec(3)*InMat(3,:,:,:)
                  Vec(2)*InMat(4,:,:,:)
                  Vec(3)*InMat(4,:,:,:)
                  Vec(3)*InMat(5,:,:,:)
                  Vec(3)*InMat(6,:,:,:)];%10x1
    elseif L == 3
        OutMat = [Vec(1)*InMat(1,:,:,:)
                  Vec(2)*InMat(1,:,:,:)
                  Vec(3)*InMat(1,:,:,:)
                  Vec(2)*InMat(2,:,:,:)
                  Vec(3)*InMat(2,:,:,:)
                  Vec(3)*InMat(3,:,:,:)
                  Vec(2)*InMat(4,:,:,:)
                  Vec(3)*InMat(4,:,:,:)
                  Vec(3)*InMat(5,:,:,:)
                  Vec(3)*InMat(6,:,:,:)
                  Vec(2)*InMat(7,:,:,:)
                  Vec(3)*InMat(7,:,:,:)
                  Vec(3)*InMat(8,:,:,:)
                  Vec(3)*InMat(9,:,:,:)
                  Vec(3)*InMat(10,:,:,:)];%15x1                  
    end
elseif (Dim == 2)
    if L == 0
        OutMat = [Vec(1)*InMat Vec(2)*InMat Vec(3)*InMat]; %This case would not be used
    elseif L == 1
        OutMat = [Vec(1)*InMat(:,1,:,:),...
                  Vec(2)*InMat(:,1,:,:),...
                  Vec(3)*InMat(:,1,:,:),...
                  Vec(2)*InMat(:,2,:,:),...
                  Vec(3)*InMat(:,2,:,:),...
                  Vec(3)*InMat(:,3,:,:)];%Nx6
    elseif L == 2
        OutMat = [Vec(1)*InMat(:,1,:,:),...
                  Vec(2)*InMat(:,1,:,:),...
                  Vec(3)*InMat(:,1,:,:),...
                  Vec(2)*InMat(:,2,:,:),...
                  Vec(3)*InMat(:,2,:,:),...
                  Vec(3)*InMat(:,3,:,:),...
                  Vec(2)*InMat(:,4,:,:),...
                  Vec(3)*InMat(:,4,:,:),...
                  Vec(3)*InMat(:,5,:,:),...
                  Vec(3)*InMat(:,6,:,:)];%Nx10
    elseif L == 3
        OutMat = [Vec(1)*InMat(:,1,:,:),...
                  Vec(2)*InMat(:,1,:,:),...
                  Vec(3)*InMat(:,1,:,:),...
                  Vec(2)*InMat(:,2,:,:),...
                  Vec(3)*InMat(:,2,:,:),...
                  Vec(3)*InMat(:,3,:,:),...
                  Vec(2)*InMat(:,4,:,:),...
                  Vec(3)*InMat(:,4,:,:),...
                  Vec(3)*InMat(:,5,:,:),...
                  Vec(3)*InMat(:,6,:,:),...
                  Vec(2)*InMat(:,7,:,:),...
                  Vec(3)*InMat(:,7,:,:),...
                  Vec(3)*InMat(:,8,:,:),...
                  Vec(3)*InMat(:,9,:,:),...
                  Vec(3)*InMat(:,10,:,:)];%15x1               
    end
end

end